import pandas as pd
import nfl_data_py as nfl
import numpy as np
class FantasyDataFrame:
    def __init__(self):
        print('Initializing...')
        # requires prerequisite csv file generated by ffc_scraper.py
        players_stats = nfl.import_seasonal_data(years=[range[1999]])
        nfl.clean_data(players_stats, inplace=True)
        players_stats.drop([])
        self.__players_stats = players_stats

    def __attach_ftsy(self):
        print("Configuring fantasy football...")
        players_stats = self.__players_stats

    
    def __get_fpts(self, row):
        players_stats = self.__players_stats
        fp = pd.DataFrame()
        fpts = np.nan
        # match id and season
        fp = players_stats[(players_stats['player_id']== row['ids']) & (players_stats['season'] == row['year'])]
        # sorts out potential duplicates (if there are any)
        if len(fp)==1:
            # adjust for lengthened 18-game nfl seasons past 2020 
            if row['year'] < 2021:
                fpts = (fp['fantasy_points_ppr'].iloc[0]) *(18/17)
            else:
                fpts = (fp['fantasy_points_ppr'].iloc[0])
            
            
            return fpts

        else:
            print("Error: " + row['player'] + "'s " + str(row['year']) + " season has unreadable data")

            # returns NaN
            return fpts

    def __map_ids(self)

        ## map all values in column id to names
        # import df of columns 'id', 'name', 'position'
        mappings = nfl.import_ids()[['name', 'position', 'gsis_id']]
        mappings.set_index('name', inplace=True)
        # use 'name' (now the index) and 'position' as key identifiers. see formatting of dict below
        mappings.index = mappings.index + mappings['position']
        mappings.drop('position', axis=1, inplace=True)
        # for dict transformation eliminate duplicate key-value pairs
        mappings.drop_duplicates(inplace=True)
        # subsets edge case name and position duplicates, keeping the first appearances who 
        # are younger & more likely to be in the nfl
        mappings = mappings[~mappings.index.duplicated(keep="first")]
        # df to dict for mapping
        mappings_dict = mappings['gsis_id'].to_dict()

        # use .map to map flat dictionary, "name+position" -->id
        print("Mapping IDs...")
        df['ids'] = (df['player'].str.strip() + df['pos'].str.strip()).map(mappings_dict)
        df['ids'].astype('str')

        # drop unmapped-id players from df (fantasy defenses, other edgecases)
        df.dropna(subset=['ids'], inplace=True)

        # add a fantasy points column to df
        print(df)
        self.__df = df
        df['fpts'] = self.__df.apply(self.__get_fpts, axis=1)
        print("Adding fantasy data...")
        print(df['fpts'])
        self.__df = df
        
    def make_subset(self, position_list, year_list):
        """
        Make a subset for plotting

        Param: desired positions and seasons as list

        Returns: subset as DataFrame
        """
        print("Making a subset...")
        df = self.__df
        df = df[(df['year'].isin(year_list))]
        return df

df = FantasyDataFrame()
# settings
position_list = ['WR','RB','TE','QB','PK']
# data from "https://fantasyfootballcalculator.com/adp/ppr/12-team/all/ + year" goes back to 2010
year_list = [2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023]


subset = df.make_subset(position_list=position_list, year_list=year_list)
df.plot_data(subset=subset, position_list=position_list, league_size = 10, flex_spots = 2, year_list=year_list)
